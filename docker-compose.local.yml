services:
  db:
    image: pgvector/pgvector:pg16
    container_name: db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: zoe-vector-db
    volumes:
      - pgdata:/var/lib/postgresql/data
    restart: "no"
    networks:
      - rag-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    container_name: backend
    depends_on:
      db:
        condition: service_healthy
    restart: "no"
    build:
      context: ./backend
    command:
      - fastapi
      - run
      - --reload
      - "app/main.py"
    environment:
      environment: ${ENVIRONMENT}
      PROJECT_NAME: ${PROJECT_NAME}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_MODEL: ${OPENAI_MODEL}
      HF_EMBEDDING_MODEL: ${HF_EMBEDDING_MODEL}
      HF_EMBEDDER_AUTH_TOKEN: ${HF_EMBEDDER_AUTH_TOKEN}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_SERVER: db
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB}
    networks:
      - rag-network
    develop:
      watch:
        - path: ./backend
          action: sync
          target: /app
          ignore:
            - ./backend/.venv
            - .venv
        - path: ./backend/pyproject.toml
          action: rebuild

  frontend:
    container_name: frontend
    depends_on:
      - backend
    build:
      context: ./frontend
    volumes:
      - frontend:/app/dist/frontend/browser
    networks:
      - rag-network

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - frontend:/usr/share/nginx/html
    depends_on:
      - frontend
      - backend
    networks:
      - rag-network

volumes:
  pgdata:
    driver: local
  frontend:
    driver: local

networks:
  rag-network:
    name: rag-network
    driver: bridge
