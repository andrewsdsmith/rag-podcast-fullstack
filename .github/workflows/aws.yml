name: Deploy to Environment

on:
  push:
    branches:
      - chore/aws-actions-deploy
    tags:
      - "v*-dev"
      - "v*-prod"

env:
  AWS_REGION: eu-west-2
  ECR_REPOSITORY_FRONTEND: rag-podcast-fullstack/frontend
  ECR_REPOSITORY_BACKEND: rag-podcast-fullstack/backend
  APP_DIR: /home/ec2-user/app # Explicit directory path

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set environment variables
        id: set-env
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          if [[ $TAG == *-prod ]]; then
            echo "ENVIRONMENT=production" >> $GITHUB_OUTPUT
            echo "EC2_INSTANCE_ID=${{ secrets.PROD_EC2_INSTANCE_ID }}" >> $GITHUB_OUTPUT
            echo "IMAGE_TAG=${TAG}" >> $GITHUB_OUTPUT
          else
            echo "ENVIRONMENT=development" >> $GITHUB_OUTPUT
            echo "EC2_INSTANCE_ID=${{ secrets.DEV_EC2_INSTANCE_ID }}" >> $GITHUB_OUTPUT
            echo "IMAGE_TAG=${TAG}" >> $GITHUB_OUTPUT
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Prepare Docker Compose File
        run: |
          FRONTEND_IMAGE="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_FRONTEND }}:${{ steps.set-env.outputs.ENVIRONMENT }}-latest"
          BACKEND_IMAGE="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_BACKEND }}:${{ steps.set-env.outputs.ENVIRONMENT }}-latest"
          sed "s|\${FRONTEND_IMAGE}|$FRONTEND_IMAGE|g; s|\${BACKEND_IMAGE}|$BACKEND_IMAGE|g; s|\${ENVIRONMENT}|${{ steps.set-env.outputs.ENVIRONMENT }}|g" \
            docker-compose.template.yml > docker-compose.yml

      - name: Copy files to EC2
        run: |
          # Create deployment directories
          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --targets "[{\"Key\":\"InstanceIds\",\"Values\":[\"${{ steps.set-env.outputs.EC2_INSTANCE_ID }}\"]}]" \
            --parameters "{\"commands\":[
              \"mkdir -p ${{ env.APP_DIR }}\",
              \"mkdir -p ${{ env.APP_DIR }}/temp\",
              \"chmod 755 ${{ env.APP_DIR }}\",
              \"chmod 755 ${{ env.APP_DIR }}/temp\"
            ]}" \
            --output text

          # Wait for directory creation
          sleep 5

          # Encode and transfer docker-compose file
          DOCKER_COMPOSE_B64=$(base64 -w 0 docker-compose.yml)

          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --targets "[{\"Key\":\"InstanceIds\",\"Values\":[\"${{ steps.set-env.outputs.EC2_INSTANCE_ID }}\"]}]" \
            --parameters "{\"commands\":[
              \"echo '${DOCKER_COMPOSE_B64}' | base64 -d > ${{ env.APP_DIR }}/temp/docker-compose.yml\",
              \"if [ -f ${{ env.APP_DIR }}/temp/docker-compose.yml ]; then echo 'File transfer successful'; else echo 'File transfer failed' >&2; exit 1; fi\"
            ]}" \
            --output text

          # Verify file permissions and content
          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --targets "[{\"Key\":\"InstanceIds\",\"Values\":[\"${{ steps.set-env.outputs.EC2_INSTANCE_ID }}\"]}]" \
            --parameters "{\"commands\":[
              \"ls -la ${{ env.APP_DIR }}/temp/docker-compose.yml\",
              \"head -n 1 ${{ env.APP_DIR }}/temp/docker-compose.yml\"
            ]}" \
            --output text

      - name: Deploy using SSM
        run: |
          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --targets '[{"Key":"InstanceIds","Values":["${{ steps.set-env.outputs.EC2_INSTANCE_ID }}"]}]' \
            --parameters '{"commands":[
              "cd ${{ env.APP_DIR }}",
              
              # Create .env file
              "cat << EOF > .env
              POSTGRES_USER=postgres
              POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
              POSTGRES_DB=postgres-${{ steps.set-env.outputs.ENVIRONMENT }}
              PROJECT_NAME=${{ secrets.PROJECT_NAME }}
              OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
              OPENAI_MODEL=${{ secrets.OPENAI_MODEL }}
              HF_EMBEDDING_MODEL=${{ secrets.HF_EMBEDDING_MODEL }}
              HF_EMBEDDER_AUTH_TOKEN=${{ secrets.HF_EMBEDDER_AUTH_TOKEN }}
              EOF",
              
              # Login to ECR
              "aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}",
              
              # Move new files into place
              "mv temp/docker-compose.yml docker-compose.yml",
              "rmdir temp",
              
              # Stop existing containers
              "docker compose down || true",
              
              # Clean up old images
              "docker system prune -f",
              
              # Pull and start new containers
              "docker compose pull",
              "docker compose up -d",
              
              # Verify deployment
              "docker compose ps --format json",
              "docker compose logs --tail=50"
            ]}' \
            --comment "Deployment from GitHub Actions" \
            --timeout-seconds 600

      - name: Verify Deployment
        run: |
          # Wait for services to be healthy
          sleep 30

          # Check container status
          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --targets '[{"Key":"InstanceIds","Values":["${{ steps.set-env.outputs.EC2_INSTANCE_ID }}"]}]' \
            --parameters '{"commands":[
              "cd ${{ env.APP_DIR }}",
              "docker compose ps",
              "docker compose logs --tail=100"
            ]}'
