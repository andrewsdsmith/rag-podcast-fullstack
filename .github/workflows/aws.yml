name: Deploy to Environment

on:
  push:
    branches:
      - chore/aws-actions-deploy
    tags:
      - "v*-dev"
      - "v*-prod"

env:
  AWS_REGION: eu-west-2
  ECR_REPOSITORY_FRONTEND: rag-podcast-fullstack/frontend
  ECR_REPOSITORY_BACKEND: rag-podcast-fullstack/backend

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set environment variables
        id: set-env
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          if [[ $TAG == *-prod ]]; then
            echo "ENVIRONMENT=production" >> $GITHUB_OUTPUT
            echo "EC2_INSTANCE_ID=${{ secrets.PROD_EC2_INSTANCE_ID }}" >> $GITHUB_OUTPUT
            echo "IMAGE_TAG=${TAG}" >> $GITHUB_OUTPUT
          else
            echo "ENVIRONMENT=development" >> $GITHUB_OUTPUT
            echo "EC2_INSTANCE_ID=${{ secrets.DEV_EC2_INSTANCE_ID }}" >> $GITHUB_OUTPUT
            echo "IMAGE_TAG=${TAG}" >> $GITHUB_OUTPUT
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Prepare Docker Compose File
        run: |
          FRONTEND_IMAGE="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_FRONTEND }}:${{ steps.set-env.outputs.ENVIRONMENT }}-latest"
          BACKEND_IMAGE="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_BACKEND }}:${{ steps.set-env.outputs.ENVIRONMENT }}-latest"
          sed "s|\${FRONTEND_IMAGE}|$FRONTEND_IMAGE|g; s|\${BACKEND_IMAGE}|$BACKEND_IMAGE|g; s|\${ENVIRONMENT}|${{ steps.set-env.outputs.ENVIRONMENT }}|g" \
            docker-compose.template.yml > docker-compose.yml

      - name: Deploy using SSM
        run: |
          # Upload docker-compose.yml and .env file to EC2
          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --targets '[{"Key":"InstanceIds","Values":["${{ steps.set-env.outputs.EC2_INSTANCE_ID }}"]}]' \
            --parameters '{"commands":[
                "mkdir -p ~/app",
                "echo Uploading Docker Compose file and environment variables",
                "cat << EOF > ~/app/.env",
                "POSTGRES_USER=postgres",
                "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}",
                "POSTGRES_DB=postgres-${{ steps.set-env.outputs.ENVIRONMENT }}",
                "PROJECT_NAME=${{ secrets.PROJECT_NAME }}",
                "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}",
                "OPENAI_MODEL=${{ secrets.OPENAI_MODEL }}",
                "HF_EMBEDDING_MODEL=${{ secrets.HF_EMBEDDING_MODEL }}",
                "HF_EMBEDDER_AUTH_TOKEN=${{ secrets.HF_EMBEDDER_AUTH_TOKEN }}",
                "EOF",
                
                "aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}",
                "cd ~/app",
                "docker compose -f docker-compose.yml --env-file .env pull",
                "docker compose -f docker-compose.yml --env-file .env up -d"
            ]}' \
            --comment "Deployment from GitHub Actions"
        env:
          AWS_REGION: ${{ env.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
