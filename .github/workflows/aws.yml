name: Deploy to Production

on:
  push:
    branches:
      - 'release/production'  # Only trigger on pushes to this branch

env:
  AWS_REGION: us-east-1  # Change to your region
  ECR_REPOSITORY_FRONTEND: rag-frontend
  ECR_REPOSITORY_BACKEND: rag-backend
  IMAGE_TAG: ${{ github.sha }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_FRONTEND }}:latest
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_FRONTEND }}:${{ env.IMAGE_TAG }}

      - name: Build and push Backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_BACKEND }}:latest
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_BACKEND }}:${{ env.IMAGE_TAG }}

      - name: Generate production docker-compose
        run: |
          cat << EOF > docker-compose.prod.yml
          services:
            db:
              image: pgvector/pgvector:pg16
              container_name: fullstack-rag-pgvector-db
              environment:
                POSTGRES_USER: \${POSTGRES_USER}
                POSTGRES_PASSWORD: \${POSTGRES_PASSWORD}
                POSTGRES_DB: \${POSTGRES_DB}
              ports:
                - "5432:5432"
              volumes:
                - pgdata:/var/lib/postgresql/data
              restart: always
              networks:
                - rag-network
              healthcheck:
                test: ["CMD-SHELL", "pg_isready -U postgres"]
                interval: 5s
                timeout: 5s
                retries: 5

            backend:
              image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_BACKEND }}:${IMAGE_TAG}
              container_name: fullstack-rag-backend
              depends_on:
                db:
                  condition: service_healthy
              restart: always
              ports:
                - "8000:8000"
              environment:
                - environment=production
                - PROJECT_NAME=\${PROJECT_NAME}
                - OPENAI_API_KEY=\${OPENAI_API_KEY}
                - OPENAI_MODEL=\${OPENAI_MODEL}
                - HF_EMBEDDING_MODEL=\${HF_EMBEDDING_MODEL}
                - HF_EMBEDDER_AUTH_TOKEN=\${HF_EMBEDDER_AUTH_TOKEN}
                - POSTGRES_USER=\${POSTGRES_USER}
                - POSTGRES_PASSWORD=\${POSTGRES_PASSWORD}
                - POSTGRES_SERVER=db
                - POSTGRES_PORT=5432
                - POSTGRES_DB=\${POSTGRES_DB}
              networks:
                - rag-network

            frontend:
              image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_FRONTEND }}:${IMAGE_TAG}
              container_name: fullstack-rag-frontend
              depends_on:
                - backend
              ports:
                - "80:80"
              networks:
                - rag-network

          volumes:
            pgdata:
              driver: local

          networks:
            rag-network:
              name: rag-network
              driver: bridge
          EOF

      - name: Copy files to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "docker-compose.prod.yml,.env"
          target: "~/app"

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd ~/app
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
            docker compose -f docker-compose.prod.yml pull
            docker compose -f docker-compose.prod.yml up -d
