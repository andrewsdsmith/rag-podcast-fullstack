# deploy.yml
name: Deploy to Environment

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      ec2_instance_id:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      POSTGRES_PASSWORD:
        required: true
      PROJECT_NAME:
        required: true
      OPENAI_API_KEY:
        required: true
      OPENAI_MODEL:
        required: true
      HF_EMBEDDING_MODEL:
        required: true
      HF_EMBEDDER_AUTH_TOKEN:
        required: true
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "staging"
        type: choice
        options:
          - staging
          - production
      skip_env_update:
        description: "Skip updating environment variables"
        required: true
        default: false
        type: boolean
      skip_docker_prune:
        description: "Skip Docker system prune"
        required: true
        default: false
        type: boolean

env:
  AWS_REGION: eu-west-2
  ECR_REPOSITORY_FRONTEND: rag-podcast-fullstack/frontend
  ECR_REPOSITORY_BACKEND: rag-podcast-fullstack/backend
  APP_DIR: /home/ec2-user/app

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set EC2 Instance ID
        id: set-instance
        run: |
          if [[ "${{ inputs.environment }}" == "production" ]]; then
            echo "EC2_INSTANCE_ID=${{ secrets.PROD_EC2_INSTANCE_ID }}" >> $GITHUB_OUTPUT
          else
            echo "EC2_INSTANCE_ID=${{ secrets.DEV_EC2_INSTANCE_ID }}" >> $GITHUB_OUTPUT
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Prepare Docker Compose File
        run: |
          FRONTEND_IMAGE="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_FRONTEND }}:${{ inputs.environment }}-latest"
          BACKEND_IMAGE="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_BACKEND }}:${{ inputs.environment }}-latest"
          sed "s|\${FRONTEND_IMAGE}|$FRONTEND_IMAGE|g; s|\${BACKEND_IMAGE}|$BACKEND_IMAGE|g; s|\${ENVIRONMENT}|${{ inputs.environment }}|g" \
            docker-compose.template.yml > docker-compose.yml

      - name: Copy files to EC2
        run: |
          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --targets "[{\"Key\":\"InstanceIds\",\"Values\":[\"${{ steps.set-instance.outputs.EC2_INSTANCE_ID }}\"]}]" \
            --parameters "{\"commands\":[
              \"mkdir -p ${{ env.APP_DIR }}\",
              \"mkdir -p ${{ env.APP_DIR }}/temp\",
              \"chmod 755 ${{ env.APP_DIR }}\",
              \"chmod 755 ${{ env.APP_DIR }}/temp\"
            ]}" \
            --output text

          DOCKER_COMPOSE_B64=$(base64 -w 0 docker-compose.yml)
          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --targets "[{\"Key\":\"InstanceIds\",\"Values\":[\"${{ steps.set-instance.outputs.EC2_INSTANCE_ID }}\"]}]" \
            --parameters "{\"commands\":[
              \"echo '${DOCKER_COMPOSE_B64}' | base64 -d > ${{ env.APP_DIR }}/temp/docker-compose.yml\"
            ]}" \
            --output text

      - name: Update Environment Variables
        if: ${{ !inputs.skip_env_update }}
        run: |
          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --targets "[{\"Key\":\"InstanceIds\",\"Values\":[\"${{ steps.set-instance.outputs.EC2_INSTANCE_ID }}\"]}]" \
            --parameters "{\"commands\":[
              \"cd ${{ env.APP_DIR }}\",
              \"cat > .env << 'EOL'\\nPOSTGRES_USER=postgres\\nPOSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}\\nPOSTGRES_DB=postgres-${{ inputs.environment }}\\nPROJECT_NAME=${{ secrets.PROJECT_NAME }}\\nOPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}\\nOPENAI_MODEL=${{ secrets.OPENAI_MODEL }}\\nHF_EMBEDDING_MODEL=${{ secrets.HF_EMBEDDING_MODEL }}\\nHF_EMBEDDER_AUTH_TOKEN=${{ secrets.HF_EMBEDDER_AUTH_TOKEN }}\\nEOL\",
              \"sudo chown -R ec2-user:docker .\",
              \"sudo chmod 640 .env\"
            ]}" \
            --output text
