services:
  db:
    image: pgvector/pgvector:pg16
    container_name: db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: zoe-vector-db
    volumes:
      - pgdata:/var/lib/postgresql/data
    restart: "no"
    networks:
      - test-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    container_name: backend
    depends_on:
      db:
        condition: service_healthy
    restart: "no"
    build:
      context: ./backend
    environment:
      ENVIRONMENT: ${ENVIRONMENT}
      FRONTEND_HOST: ${FRONTEND_HOST}
      PROJECT_NAME: ${PROJECT_NAME}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_MODEL: ${OPENAI_MODEL}
      JINA_EMBEDDER_MODEL: ${JINA_EMBEDDER_MODEL}
      JINA_API_KEY: ${JINA_API_KEY}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_SERVER: db
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ./backend/coverage:/app/htmlcov
    networks:
      - test-network
    command:
      [
        "pytest",
        "--cov=app",
        "--cov-report=html",
        "--cov-report=term",
        "--cov-fail-under=90",
        "--cov-config=app/tests/.coveragerc",
        "app/tests/integration_tests/",
        "-s",
      ]

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - backend
    networks:
      - test-network

volumes:
  pgdata:
    driver: local

networks:
  test-network:
    name: test-network
    driver: bridge
